#!/bin/bash
# scripts/deploy.sh - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

set -e

echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ minikube"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ minikube
if ! minikube status &>/dev/null; then
    echo "‚ùå minikube –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: minikube start"
    exit 1
fi

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
echo "üì¶ –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
eval $(minikube docker-env)

# Backend
docker build -t secure-app/backend:latest apps/backend/

# Frontend (–ø—Ä–æ—Å—Ç–æ–π nginx)
cat >apps/frontend/Dockerfile <<'EOF'
FROM nginx:alpine
COPY public/ /usr/share/nginx/html/
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx
USER nginx
EOF

mkdir -p apps/frontend/public
cat >apps/frontend/public/index.html <<'EOF'
<!DOCTYPE html>
<html>
<head><title>Secure K8s App</title></head>
<body>
    <h1>Secure Kubernetes Application</h1>
    <div id="users"></div>
    <script>
        fetch('/api/users')
            .then(r => r.json())
            .then(users => {
                document.getElementById('users').innerHTML = 
                    users.map(u => `<p>${u.name} - ${u.email}</p>`).join('');
            });
    </script>
</body>
</html>
EOF

docker build -t secure-app/frontend:latest apps/frontend/

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
echo "üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤..."
kubectl apply -f k8s/01-namespace.yaml
kubectl apply -f k8s/05-secrets/
kubectl apply -f k8s/06-storage/
kubectl apply -f k8s/03-rbac/
kubectl apply -f k8s/04-security/
kubectl apply -f k8s/02-network-policies/
kubectl apply -f k8s/07-apps/

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤..."
kubectl wait --for=condition=ready pod -l app=postgres -n secure-app --timeout=300s
kubectl wait --for=condition=ready pod -l app=redis -n secure-app --timeout=300s
kubectl wait --for=condition=ready pod -l app=backend -n secure-app --timeout=300s

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞
echo "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞..."
kubectl expose deployment backend --type=NodePort --port=3000 -n secure-app --dry-run=client -o yaml | kubectl apply -f -

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL
BACKEND_URL=$(minikube service backend --url -n secure-app)
echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ!"
echo "Backend URL: $BACKEND_URL"
echo "Health check: curl $BACKEND_URL/health"

---
#!/bin/bash
# scripts/security-test.sh - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

set -e

echo "üîç –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Kubernetes"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Pod Security Standards
echo "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Pod Security Standards..."
kubectl get pods -n secure-app -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.securityContext}{"\n"}{end}'

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ —Å Trivy
echo "2Ô∏è‚É£ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
if command -v trivy &>/dev/null; then
    trivy image --exit-code 1 secure-app/backend:latest
    trivy image --exit-code 1 postgres:15-alpine
    trivy image --exit-code 1 redis:7-alpine
else
    echo "‚ö†Ô∏è Trivy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ RBAC
echo "3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ RBAC..."
kubectl auth can-i --list --as=system:serviceaccount:secure-app:backend-sa -n secure-app

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Network Policies
echo "4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Network Policies..."
kubectl get networkpolicies -n secure-app -o wide

# Kube-bench (—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
echo "5Ô∏è‚É£ CIS Kubernetes Benchmark..."
if kubectl get job kube-bench -n default &>/dev/null; then
    kubectl logs job/kube-bench -n default
else
    echo "–ó–∞–ø—É—Å–∫ kube-bench..."
    kubectl apply -f - <<'EOF'
apiVersion: batch/v1
kind: Job
metadata:
  name: kube-bench
spec:
  template:
    spec:
      hostPID: true
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: kube-bench
        image: aquasec/kube-bench:latest
        command: ["kube-bench"]
        volumeMounts:
        - name: var-lib-etcd
          mountPath: /var/lib/etcd
          readOnly: true
        - name: var-lib-kubelet
          mountPath: /var/lib/kubelet
          readOnly: true
        - name: etc-kubernetes
          mountPath: /etc/kubernetes
          readOnly: true
      restartPolicy: Never
      volumes:
      - name: var-lib-etcd
        hostPath:
          path: "/var/lib/etcd"
      - name: var-lib-kubelet
        hostPath:
          path: "/var/lib/kubelet"
      - name: etc-kubernetes
        hostPath:
          path: "/etc/kubernetes"
EOF
    sleep 30
    kubectl logs job/kube-bench
fi

# Falco –¥–ª—è runtime security
echo "6Ô∏è‚É£ Runtime Security Monitoring..."
if ! kubectl get ds falco -n kube-system &>/dev/null; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Falco..."
    helm repo add falcosecurity https://falcosecurity.github.io/charts
    helm repo update
    helm install falco falcosecurity/falco \
        --namespace kube-system \
        --set falco.grpc.enabled=true \
        --set falco.grpcOutput.enabled=true
fi

echo "‚úÖ –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω"

---
#!/bin/bash
# security/scanning/attack-simulation.sh - –°–∏–º—É–ª—è—Ü–∏—è –∞—Ç–∞–∫

echo "‚ö†Ô∏è –°–ò–ú–£–õ–Ø–¶–ò–Ø –ê–¢–ê–ö - –¢–û–õ–¨–ö–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"

NAMESPACE="secure-app"
BACKEND_URL=$(minikube service backend --url -n $NAMESPACE)

# 1. –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ —Å–µ—Ç–∏
echo "1Ô∏è‚É£ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ —Å–µ—Ç–∏..."
kubectl run test-pod --image=busybox --rm -it --restart=Never -n $NAMESPACE -- /bin/sh -c "
    echo '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É...'
    wget -O- --timeout=5 google.com || echo '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ'
    
    echo '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥—Ä—É–≥–æ–º—É namespace...'
    nslookup kubernetes.default.svc.cluster.local || echo 'DNS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ'
"

# 2. –¢–µ—Å—Ç privilege escalation
echo "2Ô∏è‚É£ –¢–µ—Å—Ç privilege escalation..."
kubectl run privileged-test --image=alpine --rm -it --restart=Never -n $NAMESPACE \
    --overrides='{"spec":{"securityContext":{"runAsUser":0},"containers":[{"name":"test","image":"alpine","command":["whoami"],"securityContext":{"privileged":true}}]}}' ||
    echo "Privileged –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ"

# 3. –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ host filesystem
echo "3Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ host filesystem..."
kubectl run host-access-test --image=alpine --rm -it --restart=Never -n $NAMESPACE \
    --overrides='{"spec":{"containers":[{"name":"test","image":"alpine","command":["ls","/host"],"volumeMounts":[{"name":"host","mountPath":"/host"}]}],"volumes":[{"name":"host","hostPath":{"path":"/"}}]}}' ||
    echo "Host filesystem –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ"

# 4. –¢–µ—Å—Ç RBAC
echo "4Ô∏è‚É£ –¢–µ—Å—Ç RBAC..."
kubectl auth can-i create pods --as=system:serviceaccount:$NAMESPACE:backend-sa -n $NAMESPACE &&
    echo "‚ùå –°–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–µ –ø—Ä–∞–≤–∞" || echo "‚úÖ RBAC —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

# 5. Resource exhaustion test
echo "5Ô∏è‚É£ –¢–µ—Å—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤..."
kubectl run resource-bomb --image=progrium/stress --rm -it --restart=Never -n $NAMESPACE \
    -- --cpu 8 --timeout 10s || echo "‚úÖ Resource limits –∑–∞—â–∏—â–∞—é—Ç –æ—Ç DoS"

echo "üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
